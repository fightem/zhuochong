# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'fanyi.ui'
#
# Created by: PyQt5 UI code generator 5.15.10
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt5.QtWidgets import QApplication, QWidget, QLabel, QLineEdit, QPushButton, QVBoxLayout, QHBoxLayout, QSizePolicy, QFrame, QMessageBox

# from VoiceSettingUI import get_latest_pet_sound
from PyQt5 import QtCore, QtGui, QtWidgets
default_city = '武汉'
from PyQt5.QtCore import Qt, QThread, pyqtSignal
from hashlib import md5
import random,requests


def translate_text(query, from_lang='zh', to_lang='en'):
    # 设置你自己的 appid/appkey。
    appid = '20240222001970292'
    appkey = 'uCBTLM_IlM9hf916fA2r'

    endpoint = 'http://api.fanyi.baidu.com'
    path = '/api/trans/vip/translate'
    url = endpoint + path

    def make_md5(s, encoding='utf-8'):
        return md5(s.encode(encoding)).hexdigest()

    salt = random.randint(32768, 65536)
    sign = make_md5(appid + query + str(salt) + appkey)

    headers = {'Content-Type': 'application/x-www-form-urlencoded'}
    payload = {'appid': appid, 'q': query, 'from': from_lang, 'to': to_lang, 'salt': salt, 'sign': sign}

    r = requests.post(url, params=payload, headers=headers)
    result = r.json()

    # 解析JSON数据，选择目标内容
    trans_result = result.get('trans_result', [])
    filtered_results = [item['dst'] for item in trans_result]

    return filtered_results

def translate(msg, from_language, to_language):
    languages_mapping = {
        "中文": "zh",
        "日文": "jp",
        "英文": "en"
    }

    from_lang = languages_mapping[f'{from_language}']
    to_lang = languages_mapping[f'{to_language}']

    msgs = translate_text(msg, from_lang, to_lang)
    return msgs


class Ui_Form(object):
    def setupUi(self, Form):
        Form.setObjectName("Form")
        Form.resize(629, 317)
        self.widget = QtWidgets.QWidget(Form)
        self.widget.setGeometry(QtCore.QRect(20, 20, 560, 279))
        self.widget.setObjectName("widget")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout(self.widget)
        self.horizontalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.groupBox = QtWidgets.QGroupBox(self.widget)
        self.groupBox.setObjectName("groupBox")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.groupBox)
        self.verticalLayout.setObjectName("verticalLayout")
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.radioButton = QtWidgets.QRadioButton(self.groupBox)
        self.radioButton.setObjectName("radioButton")
        self.horizontalLayout.addWidget(self.radioButton)
        self.radioButton_3 = QtWidgets.QRadioButton(self.groupBox)
        self.radioButton_3.setObjectName("radioButton_3")
        self.horizontalLayout.addWidget(self.radioButton_3)
        self.radioButton_2 = QtWidgets.QRadioButton(self.groupBox)
        self.radioButton_2.setObjectName("radioButton_2")
        self.horizontalLayout.addWidget(self.radioButton_2)
        self.verticalLayout.addLayout(self.horizontalLayout)
        self.plainTextEdit = QtWidgets.QPlainTextEdit(self.groupBox)
        self.plainTextEdit.setObjectName("plainTextEdit")
        self.verticalLayout.addWidget(self.plainTextEdit)
        self.pushButton = QtWidgets.QPushButton(self.groupBox)
        self.pushButton.setObjectName("pushButton")
        self.verticalLayout.addWidget(self.pushButton)
        self.horizontalLayout_2.addWidget(self.groupBox)
        self.groupBox_2 = QtWidgets.QGroupBox(self.widget)
        self.groupBox_2.setTitle("")
        self.groupBox_2.setObjectName("groupBox_2")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.groupBox_2)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.comboBox = QtWidgets.QComboBox(self.groupBox_2)
        self.comboBox.setEditable(False)
        self.comboBox.setObjectName("comboBox")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.verticalLayout_2.addWidget(self.comboBox)
        self.plainTextEdit_2 = QtWidgets.QPlainTextEdit(self.groupBox_2)
        self.plainTextEdit_2.setPlaceholderText("")
        self.plainTextEdit_2.setObjectName("plainTextEdit_2")
        self.verticalLayout_2.addWidget(self.plainTextEdit_2)
        self.horizontalLayout_2.addWidget(self.groupBox_2)

        self.retranslateUi(Form)
        QtCore.QMetaObject.connectSlotsByName(Form)

    def retranslateUi(self, Form):
        _translate = QtCore.QCoreApplication.translate
        Form.setWindowTitle(_translate("Form", "在线翻译"))
        self.groupBox.setTitle(_translate("Form", "输入语言"))
        self.radioButton.setText(_translate("Form", "中文"))
        self.radioButton_3.setText(_translate("Form", "英语"))
        self.radioButton_2.setText(_translate("Form", "日语"))
        self.plainTextEdit.setPlaceholderText(_translate("Form", "请输入翻译文字"))
        self.pushButton.setText(_translate("Form", "translate"))
        self.pushButton.clicked.connect(self.pushButton_clicked)

        self.comboBox.setItemText(0, _translate("Form", "请选择输出语言"))
        self.comboBox.setItemText(1, _translate("Form", "中文"))
        self.comboBox.setItemText(2, _translate("Form", "英文"))
        self.comboBox.setItemText(3, _translate("Form", "日文"))


    def pushButton_clicked(self):
        # 获取左侧页面选择的语言内容
        selected_language = self.radioButton.text() if self.radioButton.isChecked() else \
            self.radioButton_2.text() if self.radioButton_2.isChecked() else \
                self.radioButton_3.text() if self.radioButton_3.isChecked() else \
                    ""

        # 获取右侧页面需要翻译的类型语言
        right_selected_language = self.comboBox.currentText()

        # 获取左侧的翻译的文本的内容

        input_text = self.plainTextEdit.toPlainText()

        if selected_language and right_selected_language!= '请选择输出语言':
            print('选择的语言:', selected_language, '输出的语言:', right_selected_language)
            result = translate(input_text, selected_language,  right_selected_language)


            # 在右侧页面显示翻译结果
            self.plainTextEdit_2.setPlainText("\n".join(result))

        else:
            QMessageBox.warning(self, '警告', '请选择输入输出语言！')




class TranslateWindow(QWidget, Ui_Form):
    def __init__(self):
        super().__init__()
        self.setWindowTitle('天气预报')
        self.setupUi(self)

    def closeEvent(self, event):
         event.ignore()  # 忽略默认的关闭事件
         self.hide()  # 隐藏当前窗口，而不是关闭





if __name__ == "__main__":

    print(translate_text('我叫胡晓安， 今天我十八岁'))
    app = QApplication([])
    main_window = TranslateWindow()



    main_window.show()
    app.exec_()
